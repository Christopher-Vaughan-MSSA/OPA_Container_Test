# Variables
$resourceGroup="opatest"
$storageAccount="regostorage"
$containerName="regocontainer"
$blobContainerName="regoBlobContainer"
$fileShareName="regoFileShareName"
$fileNames = "AADConfig.rego", "DefenderConfig.rego", "EXOConfig.rego", "PowerPlatformConfig.rego", "SharepointConfig.rego", "TeamsConfig.rego"

# Create a resource group
#az group create --name $resourceGroup --location eastus

# Create a storage account
az storage account create --name $storageAccount --resource-group $resourceGroup --location eastus --sku Standard_LRS

# Create a blob container
az storage container create --account-name $storageAccount --name $blobContainerName

foreach ($fileName in $fileNames){
    if($fileName -eq "AADConfig.rego"){
        $aadRego = Invoke-WebRequest -Uri https://github.com/cisagov/ScubaGear/raw/main/PowerShell/ScubaGear/Rego/$fileName -ContentType json
        Write-Host ("Rego file for $fileName found")
        az storage blob upload --account-name $storageAccount --container-name $blobContainerName --name AADConfig.rego --file $aadRego --content-type json
        Write-Host ("Rego file for $fileName uploaded to Azure Storage")
        }
    elseif($fileName -eq "DefenderConfig.rego"){
        $defenderRego = Invoke-WebRequest -Uri https://github.com/cisagov/ScubaGear/raw/main/PowerShell/ScubaGear/Rego/$fileName -ContentType json
        Write-Host ("Rego file for $fileName found")
        az storage blob upload --account-name $storageAccount --container-name $blobContainerName --name DefenderConfig.rego --file $DefenderRego --content-type json
        Write-Host ("Rego file for $fileName uploaded to Azure Storage")
        }
    elseif($fileName -eq "EXOConfig.rego"){
        $EXORego = Invoke-WebRequest -Uri https://github.com/cisagov/ScubaGear/raw/main/PowerShell/ScubaGear/Rego/$fileName -ContentType json
        Write-Host ("Rego file for $fileName found")
        az storage blob upload --account-name $storageAccount --container-name $blobContainerName --name EXOConfig.rego --file $EXORego --content-type json
        Write-Host ("Rego file for $fileName uploaded to Azure Storage")
        }
    elseif($fileName -eq "PowerPlatformConfig.rego"){
        $PowerPlatformRego = Invoke-WebRequest -Uri https://github.com/cisagov/ScubaGear/raw/main/PowerShell/ScubaGear/Rego/$fileName -ContentType json
        Write-Host ("Rego file for $fileName found")
        az storage blob upload --account-name $storageAccount --container-name $blobContainerName --name PowerPlatformConfig.rego --file $PowerPlatformRego --content-type json
        Write-Host ("Rego file for $fileName uploaded to Azure Storage")
        }
    elseif($fileName -eq "SharepointConfig.rego"){
        $SharePointRego = Invoke-WebRequest -Uri https://github.com/cisagov/ScubaGear/raw/main/PowerShell/ScubaGear/Rego/$fileName -ContentType json
        Write-Host ("Rego file for $fileName found")
        az storage blob upload --account-name $storageAccount --container-name $blobContainerName --name SharepointConfig.rego --file $SharePointRego --content-type json
        Write-Host ("Rego file for $fileName uploaded to Azure Storage")
        }
    elseif($fileName -eq "TeamsConfig.rego"){
        $TeamsRego = Invoke-WebRequest -Uri https://github.com/cisagov/ScubaGear/raw/main/PowerShell/ScubaGear/Rego/$fileName -ContentType json
        Write-Host ("Rego file for $fileName found")
        az storage blob upload --account-name $storageAccount --container-name $blobContainerName --name TeamsConfig.rego --file $TeamsRego --content-type json
        Write-Host ("Rego file for $fileName uploaded to Azure Storage")
        }
    else{
        Write-Host ("No rego file for $fileName found")
        }
} 

# Get the storage account key
accountKey=$(az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query '[0].value' --output tsv)

# Create the container instance with the mounted storage
az container create --resource-group $resourceGroup --name $containerName --image openpolicyagent/opa --azure-file-volume-account-name $storageAccount --azure-file-volume-account-key $accountKey --azure-file-volume-share-name $fileShareName --azure-file-volume-mount-path /mnt/rego

